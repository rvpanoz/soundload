{"version":3,"file":"codeSign.js","sourceRoot":"","sources":["../src/codeSign.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { randomBytes } from \"crypto\"\nimport { exec, getCacheDirectory, isEmptyOrSpaces, TmpDir } from \"electron-builder-util\"\nimport { copyFile, statOrNull, unlinkIfExists } from \"electron-builder-util/out/fs\"\nimport { httpExecutor } from \"electron-builder-util/out/nodeHttpExecutor\"\nimport { outputFile, rename } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport { homedir } from \"os\"\nimport * as path from \"path\"\nimport { getTempName } from \"temp-file\"\nimport { isAutoDiscoveryCodeSignIdentity } from \"./util/flags\"\n\nexport const appleCertificatePrefixes = [\"Developer ID Application:\", \"Developer ID Installer:\", \"3rd Party Mac Developer Application:\", \"3rd Party Mac Developer Installer:\"]\n\nexport type CertType = \"Developer ID Application\" | \"Developer ID Installer\" | \"3rd Party Mac Developer Application\" | \"3rd Party Mac Developer Installer\" | \"Mac Developer\"\n\nexport interface CodeSigningInfo {\n  keychainName?: string | null\n}\n\n/** @private */\nexport async function downloadCertificate(urlOrBase64: string, tmpDir: TmpDir, currentDir: string): Promise<string> {\n  urlOrBase64 = urlOrBase64.trim()\n\n  let file: string | null = null\n  if ((urlOrBase64.length > 3 && urlOrBase64[1] === \":\") || urlOrBase64.startsWith(\"/\") || urlOrBase64.startsWith(\".\")) {\n    file = urlOrBase64\n  }\n  else if (urlOrBase64.startsWith(\"file://\")) {\n    file = urlOrBase64.substring(\"file://\".length)\n  }\n  else if (urlOrBase64.startsWith(\"~/\")) {\n    file = path.join(homedir(), urlOrBase64.substring(\"~/\".length))\n  }\n  else {\n    const isUrl = urlOrBase64.startsWith(\"https://\")\n    if (isUrl || urlOrBase64.length > 2048 || urlOrBase64.endsWith(\"=\")) {\n      const tempFile = await tmpDir.getTempFile(\".p12\")\n      if (isUrl) {\n        await httpExecutor.download(urlOrBase64, tempFile)\n      }\n      else {\n        await outputFile(tempFile, new Buffer(urlOrBase64, \"base64\"))\n      }\n      return tempFile\n    }\n    else {\n      file = urlOrBase64\n    }\n  }\n\n  file = path.resolve(currentDir, file)\n  const stat = await statOrNull(file)\n  if (stat == null) {\n    throw new Error(`${file} doesn't exist`)\n  }\n  else if (!stat.isFile()) {\n    throw new Error(`${file} not a file`)\n  }\n  else {\n    return file\n  }\n}\n\nconst bundledCertKeychainAdded = new Lazy<void>(createCustomCertKeychain)\n\n// \"Note that filename will not be searched to resolve the signing identity's certificate chain unless it is also on the user's keychain search list.\"\n// but \"security list-keychains\" doesn't support add - we should 1) get current list 2) set new list - it is very bad http://stackoverflow.com/questions/10538942/add-a-keychain-to-search-list\n// \"overly complicated and introduces a race condition.\"\n// https://github.com/electron-userland/electron-builder/issues/398\nasync function createCustomCertKeychain() {\n  // copy to temp and then atomic rename to final path\n  const tmpKeychainPath = path.join(getCacheDirectory(), getTempName(\"electron-builder-root-certs\"))\n  const keychainPath = path.join(getCacheDirectory(), \"electron-builder-root-certs.keychain\")\n  const results = await BluebirdPromise.all<any>([\n    listUserKeychains(),\n    copyFile(path.join(__dirname, \"..\", \"certs\", \"root_certs.keychain\"), tmpKeychainPath)\n      .then(() => rename(tmpKeychainPath, keychainPath)),\n  ])\n  const list = results[0]\n  if (!list.includes(keychainPath)) {\n    await exec(\"security\", [\"list-keychains\", \"-d\", \"user\", \"-s\", keychainPath].concat(list))\n  }\n}\n\nfunction listUserKeychains(): Promise<Array<string>> {\n  return exec(\"security\", [\"list-keychains\", \"-d\", \"user\"])\n    .then(it => it\n      .split(\"\\n\")\n      .map(it => {\n        const r = it.trim()\n        return r.substring(1, r.length - 1)\n      })\n      .filter(it => it.length > 0))\n}\n\nexport interface CreateKeychainOptions {\n  tmpDir: TmpDir\n  cscLink: string\n  cscKeyPassword: string\n  cscILink?: string | null\n  cscIKeyPassword?: string | null\n  currentDir: string\n}\n\nasync function removeKeychain(keychainFile: string) {\n  try {\n    await exec(\"security\", [\"delete-keychain\", keychainFile])\n  }\n  catch (e) {\n    console.warn(`Cannot delete keychain ${keychainFile}: ${e.stack || e}`)\n    await unlinkIfExists(keychainFile)\n  }\n}\n\nexport async function createKeychain({tmpDir, cscLink, cscKeyPassword, cscILink, cscIKeyPassword, currentDir}: CreateKeychainOptions): Promise<CodeSigningInfo> {\n  // travis has correct AppleWWDRCA cert\n  if (process.env.TRAVIS !== \"true\") {\n    await bundledCertKeychainAdded.value\n  }\n\n  const keychainFile = await tmpDir.getTempFile(\".keychain\", false, removeKeychain)\n\n  const certLinks = [cscLink]\n  if (cscILink != null) {\n    certLinks.push(cscILink)\n  }\n\n  const certPaths = new Array(certLinks.length)\n  const keychainPassword = randomBytes(8).toString(\"base64\")\n  await BluebirdPromise.all([\n    // we do not clear downloaded files - will be removed on tmpDir cleanup automatically. not a security issue since in any case data is available as env variables and protected by password.\n    BluebirdPromise.map(certLinks, (link, i) => downloadCertificate(link, tmpDir, currentDir).then(it => certPaths[i] = it)),\n    BluebirdPromise.mapSeries([\n      [\"create-keychain\", \"-p\", keychainPassword, keychainFile],\n      [\"unlock-keychain\", \"-p\", keychainPassword, keychainFile],\n      [\"set-keychain-settings\", keychainFile]\n    ], it => exec(\"security\", it))\n  ])\n\n  // https://stackoverflow.com/questions/42484678/codesign-keychain-gets-ignored\n  // https://github.com/electron-userland/electron-builder/issues/1457\n  const list = await listUserKeychains()\n  if (!list.includes(keychainFile)) {\n    await exec(\"security\", [\"list-keychains\", \"-d\", \"user\", \"-s\", keychainFile].concat(list))\n  }\n  return await importCerts(keychainFile, certPaths, [cscKeyPassword, cscIKeyPassword].filter(it => it != null) as Array<string>)\n}\n\nasync function importCerts(keychainName: string, paths: Array<string>, keyPasswords: Array<string>): Promise<CodeSigningInfo> {\n  for (let i = 0; i < paths.length; i++) {\n    await exec(\"security\", [\"import\", paths[i], \"-k\", keychainName, \"-T\", \"/usr/bin/codesign\", \"-T\", \"/usr/bin/productbuild\", \"-P\", keyPasswords[i]])\n  }\n\n  return {\n    keychainName,\n  }\n}\n\n/** @private */\nexport function sign(path: string, name: string, keychain: string): Promise<any> {\n  const args = [\"--deep\", \"--force\", \"--sign\", name, path]\n  if (keychain != null) {\n    args.push(\"--keychain\", keychain)\n  }\n  return exec(\"codesign\", args)\n}\n\nexport let findIdentityRawResult: Promise<Array<string>> | null = null\n\nasync function getValidIdentities(keychain?: string | null): Promise<Array<string>> {\n  function addKeychain(args: Array<string>) {\n    if (keychain != null) {\n      args.push(keychain)\n    }\n    return args\n  }\n\n  let result = findIdentityRawResult\n  if (result == null || keychain != null) {\n    // https://github.com/electron-userland/electron-builder/issues/481\n    // https://github.com/electron-userland/electron-builder/issues/535\n    result = BluebirdPromise.all<Array<string>>([\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\"]))\n        .then(it => it.trim().split(\"\\n\").filter(it => {\n          for (const prefix of appleCertificatePrefixes) {\n            if (it.includes(prefix)) {\n              return true\n            }\n          }\n          return false\n        })),\n      exec(\"security\", addKeychain([\"find-identity\", \"-v\", \"-p\", \"codesigning\"]))\n        .then(it => it.trim().split((\"\\n\"))),\n    ])\n      .then(it => {\n        const array = it[0].concat(it[1])\n          .filter(it => !it.includes(\"(Missing required extension)\") && !it.includes(\"valid identities found\") && !it.includes(\"iPhone \") && !it.includes(\"com.apple.idms.appleid.prd.\"))\n          // remove 1)\n          .map(it => it.substring(it.indexOf(\")\") + 1).trim())\n        return Array.from(new Set(array))\n      })\n\n    if (keychain == null) {\n      findIdentityRawResult = result\n    }\n  }\n  return result\n}\n\nasync function _findIdentity(type: CertType, qualifier?: string | null, keychain?: string | null): Promise<Identity | null> {\n  // https://github.com/electron-userland/electron-builder/issues/484\n  //noinspection SpellCheckingInspection\n  const lines = await getValidIdentities(keychain)\n  const namePrefix = `${type}:`\n  for (const line of lines) {\n    if (qualifier != null && !line.includes(qualifier)) {\n      continue\n    }\n\n    if (line.includes(namePrefix)) {\n      return parseIdentity(line)\n    }\n  }\n\n  if (type === \"Developer ID Application\") {\n    // find non-Apple certificate\n    // https://github.com/electron-userland/electron-builder/issues/458\n    l: for (const line of lines) {\n      if (qualifier != null && !line.includes(qualifier)) {\n        continue\n      }\n\n      if (line.includes(\"Mac Developer:\")) {\n        continue\n      }\n\n      for (const prefix of appleCertificatePrefixes) {\n        if (line.includes(prefix)) {\n          continue l\n        }\n      }\n\n      return parseIdentity(line)\n    }\n  }\n  return null\n}\n\nexport declare class Identity {\n  readonly name: string\n  readonly hash: string\n\n  constructor(name: string, hash: string)\n}\n\nconst _Identity = require(\"electron-osx-sign/util-identities\").Identity\n\nfunction parseIdentity(line: string): Identity {\n  const firstQuoteIndex = line.indexOf('\"')\n  const name = line.substring(firstQuoteIndex + 1, line.lastIndexOf('\"'))\n  const hash = line.substring(0, firstQuoteIndex - 1)\n  return new _Identity(name, hash)\n}\n\nexport function findIdentity(certType: CertType, qualifier?: string | null, keychain?: string | null): Promise<Identity | null> {\n  let identity = qualifier || process.env.CSC_NAME\n  if (isEmptyOrSpaces(identity)) {\n    if (isAutoDiscoveryCodeSignIdentity()) {\n      return _findIdentity(certType, null, keychain)\n    }\n    else {\n      return BluebirdPromise.resolve(null)\n    }\n  }\n  else {\n    identity = identity!.trim()\n    for (const prefix of appleCertificatePrefixes) {\n      checkPrefix(identity, prefix)\n    }\n    return _findIdentity(certType, identity, keychain)\n  }\n}\n\nfunction checkPrefix(name: string, prefix: string) {\n  if (name.startsWith(prefix)) {\n    throw new Error(`Please remove prefix \"${prefix}\" from the specified name — appropriate certificate will be chosen automatically`)\n  }\n}"]}
