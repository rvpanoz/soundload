{"version":3,"file":"windowsCodeSign.js","sourceRoot":"","sources":["../src/windowsCodeSign.ts"],"names":[],"mappings":"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","sourcesContent":["import { exec, isMacOsSierra, warn } from \"electron-builder-util\"\nimport { getBinFromGithub } from \"electron-builder-util/out/binDownload\"\nimport { computeToolEnv, ToolInfo } from \"electron-builder-util/out/bundledTool\"\nimport { rename } from \"fs-extra-p\"\nimport isCi from \"is-ci\"\nimport * as os from \"os\"\nimport * as path from \"path\"\nimport { WinBuildOptions } from \"./options/winOptions\"\nimport { isUseSystemSigncode } from \"./util/flags\"\n\nexport function getSignVendorPath() {\n  //noinspection SpellCheckingInspection\n  return getBinFromGithub(\"winCodeSign\", \"1.9.0\", \"cyhO9Mv5MTP2o9dwk/+qs0KvuO9CbDhjEJXA2ujpvhcsk5zmc+zY9iqiWXVzOuibTLYNC3qZiuFlJrrCT2kldw==\")\n}\n\nexport interface FileCodeSigningInfo {\n  readonly file?: string | null\n  readonly password?: string | null\n\n  readonly subjectName?: string | null\n  readonly certificateSha1?: string | null\n}\n\nexport interface SignOptions {\n  readonly path: string\n\n  readonly cert?: string | null\n\n  readonly name?: string | null\n  readonly password?: string | null\n  readonly site?: string | null\n\n  readonly options: WinBuildOptions\n}\n\nexport async function sign(options: SignOptions) {\n  let hashes = options.options.signingHashAlgorithms\n  // msi does not support dual-signing\n  if (options.path.endsWith(\".msi\")) {\n    hashes = [hashes != null && !hashes.includes(\"sha1\") ? \"sha256\" : \"sha1\"]\n  }\n  else if (options.path.endsWith(\".appx\")) {\n    hashes = [\"sha256\"]\n  }\n  else {\n    if (hashes == null) {\n      hashes = [\"sha1\", \"sha256\"]\n    }\n    else {\n      hashes = Array.isArray(hashes) ? hashes.slice() : [hashes]\n    }\n  }\n\n  const isWin = process.platform === \"win32\"\n  let nest = false\n  //noinspection JSUnusedAssignment\n  let outputPath = \"\"\n  for (const hash of hashes) {\n    outputPath = isWin ? options.path : getOutputPath(options.path, hash)\n    await spawnSign(options, options.path, outputPath, hash, nest)\n    nest = true\n    if (!isWin) {\n      await rename(outputPath, options.path)\n    }\n  }\n}\n\n// on windows be aware of http://stackoverflow.com/a/32640183/1910191\nasync function spawnSign(options: SignOptions, inputPath: string, outputPath: string, hash: string, nest: boolean) {\n  const isWin = process.platform === \"win32\"\n  const args = isWin ? [\"sign\"] : [\"-in\", inputPath, \"-out\", outputPath]\n\n  if (process.env.ELECTRON_BUILDER_OFFLINE !== \"true\") {\n    const timestampingServiceUrl = options.options.timeStampServer || \"http://timestamp.verisign.com/scripts/timstamp.dll\"\n    if (isWin) {\n      args.push(nest || hash === \"sha256\" ? \"/tr\" : \"/t\", nest || hash === \"sha256\" ? (options.options.rfc3161TimeStampServer || \"http://timestamp.comodoca.com/rfc3161\") : timestampingServiceUrl)\n    }\n    else {\n      args.push(\"-t\", timestampingServiceUrl)\n    }\n  }\n\n  const certificateFile = options.cert\n  if (certificateFile == null) {\n    const subjectName = options.options.certificateSubjectName\n    if (process.platform !== \"win32\") {\n      throw new Error(`${subjectName == null ? \"certificateSha1\" : \"certificateSubjectName\"} supported only on Windows`)\n    }\n\n    if (subjectName == null) {\n      args.push(\"/sha1\", options.options.certificateSha1!)\n    }\n    else {\n      args.push(\"/n\", subjectName)\n    }\n  }\n  else {\n    const certExtension = path.extname(certificateFile)\n    if (certExtension === \".p12\" || certExtension === \".pfx\") {\n      args.push(isWin ? \"/f\" : \"-pkcs12\", certificateFile)\n    }\n    else {\n      throw new Error(`Please specify pkcs12 (.p12/.pfx) file, ${certificateFile} is not correct`)\n    }\n  }\n\n  if (!isWin || hash !== \"sha1\") {\n    args.push(isWin ? \"/fd\" : \"-h\", hash)\n    if (isWin && process.env.ELECTRON_BUILDER_OFFLINE !== \"true\") {\n      args.push(\"/td\", \"sha256\")\n    }\n  }\n\n  if (options.name) {\n    args.push(isWin ? \"/d\" : \"-n\", options.name)\n  }\n\n  if (options.site) {\n    args.push(isWin ? \"/du\" : \"-i\", options.site)\n  }\n\n  // msi does not support dual-signing\n  if (nest) {\n    args.push(isWin ? \"/as\" : \"-nest\")\n  }\n\n  if (options.password) {\n    args.push(isWin ? \"/p\" : \"-pass\", options.password)\n  }\n\n  if (options.options.additionalCertificateFile) {\n    args.push(isWin ? \"/ac\" : \"-ac\", options.options.additionalCertificateFile)\n  }\n\n  if (isWin) {\n    // must be last argument\n    args.push(inputPath)\n  }\n\n  const toolInfo = await getToolPath()\n  return await exec(toolInfo.path, args, {\n    timeout: 120 * 1000,\n    env: toolInfo.env || process.env\n  })\n}\n\nfunction getOutputPath(inputPath: string, hash: string) {\n  const extension = path.extname(inputPath)\n  return path.join(path.dirname(inputPath), `${path.basename(inputPath, extension)}-signed-${hash}${extension}`)\n}\n\n/** @internal */\nexport function isOldWin6() {\n  const winVersion = os.release()\n  return winVersion.startsWith(\"6.\") && !winVersion.startsWith(\"6.3\")\n}\n\nasync function getToolPath(): Promise<ToolInfo> {\n  if (isUseSystemSigncode()) {\n    return {path: \"osslsigncode\"}\n  }\n\n  const result = process.env.SIGNTOOL_PATH\n  if (result) {\n    return {path: result}\n  }\n\n  const vendorPath = await getSignVendorPath()\n  if (process.platform === \"win32\") {\n    // use modern signtool on Windows Server 2012 R2 to be able to sign AppX\n    if (isOldWin6()) {\n      return {path: path.join(vendorPath, \"windows-6\", \"signtool.exe\")}\n    }\n    else {\n      return {path: path.join(vendorPath, \"windows-10\", process.arch, \"signtool.exe\")}\n    }\n  }\n  else if (process.platform === \"darwin\") {\n    let suffix: string | null = null\n    try {\n      if (await isMacOsSierra()) {\n        const toolDirPath = path.join(vendorPath, process.platform, \"10.12\")\n        return {\n          path: path.join(toolDirPath, \"osslsigncode\"),\n          env: computeToolEnv([path.join(toolDirPath, \"lib\")]),\n        }\n      }\n      else if (isCi) {\n        // not clear for what we do this instead of using version detection\n        suffix = \"ci\"\n      }\n    }\n    catch (e) {\n      warn(`${e.stack || e}`)\n    }\n    return {path: path.join(vendorPath, process.platform, `${suffix == null ? \"\" : `${suffix}/`}osslsigncode`)}\n  }\n  else {\n    return {path: path.join(vendorPath, process.platform, \"osslsigncode\")}\n  }\n}\n"]}
