"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addCustomMessageFileInclude = exports.AppPackageHelper = exports.nsisTemplatesDir = undefined;

var _bluebirdLst;

function _load_bluebirdLst() {
    return _bluebirdLst = require("bluebird-lst");
}

var _bluebirdLst2;

function _load_bluebirdLst2() {
    return _bluebirdLst2 = _interopRequireDefault(require("bluebird-lst"));
}

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let writeCustomLangFile = (() => {
    var _ref3 = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (data, packager) {
        const file = yield packager.getTempFile("messages.nsh");
        yield (0, (_fsExtraP || _load_fsExtraP()).outputFile)(file, data);
        return file;
    });

    return function writeCustomLangFile(_x, _x2) {
        return _ref3.apply(this, arguments);
    };
})();

let addCustomMessageFileInclude = exports.addCustomMessageFileInclude = (() => {
    var _ref4 = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (input, packager, isMultiLang, scriptGenerator) {
        const data = (0, (_jsYaml || _load_jsYaml()).safeLoad)((yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(_path.join(nsisTemplatesDir, input), "utf-8")));
        if (!isMultiLang) {
            for (const messageId of Object.keys(data)) {
                for (const langId of Object.keys(data[messageId])) {
                    if (langId !== "en") {
                        delete data[messageId][langId];
                    }
                }
            }
        }
        const instructions = computeCustomMessageTranslations(data, isMultiLang).join("\n");
        debug(instructions);
        scriptGenerator.include((yield writeCustomLangFile(instructions, packager)));
    });

    return function addCustomMessageFileInclude(_x3, _x4, _x5, _x6) {
        return _ref4.apply(this, arguments);
    };
})();

var _debug2;

function _load_debug() {
    return _debug2 = _interopRequireDefault(require("debug"));
}

var _electronBuilderUtil;

function _load_electronBuilderUtil() {
    return _electronBuilderUtil = require("electron-builder-util");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _jsYaml;

function _load_jsYaml() {
    return _jsYaml = require("js-yaml");
}

var _path = _interopRequireWildcard(require("path"));

var _license;

function _load_license() {
    return _license = require("../license");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const nsisTemplatesDir = exports.nsisTemplatesDir = _path.join(__dirname, "..", "..", "..", "templates", "nsis");
const debug = (0, (_debug2 || _load_debug()).default)("electron-builder:nsis");
class AppPackageHelper {
    constructor() {
        this.archToFileInfo = new Map();
        this.infoToIsDelete = new Map();
        /** @private */
        this.refCount = 0;
    }
    packArch(arch, target) {
        var _this = this;

        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {
            let infoPromise = _this.archToFileInfo.get(arch);
            if (infoPromise == null) {
                infoPromise = (0, (_electronBuilderUtil || _load_electronBuilderUtil()).subTask)(`Packaging NSIS installer for arch ${(_electronBuilderUtil || _load_electronBuilderUtil()).Arch[arch]}`, target.buildAppPackage(target.archs.get(arch), arch)).then(function (it) {
                    return { file: it };
                });
                _this.archToFileInfo.set(arch, infoPromise);
            }
            const info = yield infoPromise;
            if (target.isWebInstaller) {
                _this.infoToIsDelete.set(info, false);
            } else if (!_this.infoToIsDelete.has(info)) {
                _this.infoToIsDelete.set(info, true);
            }
            return info.file;
        })();
    }
    finishBuild() {
        var _this2 = this;

        return (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* () {
            if (--_this2.refCount > 0) {
                return;
            }
            const filesToDelete = [];
            for (const _ref of _this2.infoToIsDelete.entries()) {
                var _ref2 = _slicedToArray(_ref, 2);

                const info = _ref2[0];
                const isDelete = _ref2[1];

                if (isDelete) {
                    filesToDelete.push(info.file);
                }
            }
            yield (_bluebirdLst2 || _load_bluebirdLst2()).default.map(filesToDelete, function (it) {
                return (0, (_fsExtraP || _load_fsExtraP()).unlink)(it);
            });
        })();
    }
}
exports.AppPackageHelper = AppPackageHelper;

function computeCustomMessageTranslations(messages, isUnicodeEnabled) {
    const result = [];
    for (const messageId of Object.keys(messages)) {
        const langToTranslations = messages[messageId];
        const unspecifiedLangs = new Set((_license || _load_license()).bundledLanguages);
        for (const lang of Object.keys(langToTranslations)) {
            const langWithRegion = (0, (_license || _load_license()).toLangWithRegion)(lang);
            result.push(`LangString ${messageId} ${(_license || _load_license()).lcid[langWithRegion]} "${langToTranslations[lang].replace(/\n/g, "$\\r$\\n")}"`);
            unspecifiedLangs.delete(langWithRegion);
        }
        if (isUnicodeEnabled) {
            const defaultTranslation = langToTranslations.en.replace(/\n/g, "$\\r$\\n");
            for (const langWithRegion of unspecifiedLangs) {
                result.push(`LangString ${messageId} ${(_license || _load_license()).lcid[langWithRegion]} "${defaultTranslation}"`);
            }
        }
    }
    return result;
}
//# sourceMappingURL=nsisUtil.js.map