{"version":3,"file":"nsisUtil.js","sourceRoot":"","sources":["../../../../../src/targets/nsis/nsisUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport _debug from \"debug\"\nimport { Arch, subTask } from \"electron-builder-util\"\nimport { outputFile, readFile, unlink } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\nimport { PlatformPackager } from \"../../platformPackager\"\nimport { bundledLanguages, lcid, toLangWithRegion } from \"../license\"\nimport { NsisTarget } from \"./nsis\"\nimport { NsisScriptGenerator } from \"./nsisScriptGenerator\"\n\nexport const nsisTemplatesDir = path.join(__dirname, \"..\", \"..\", \"..\", \"templates\", \"nsis\")\n\ninterface PackageFileInfo {\n  file: string\n}\n\nconst debug = _debug(\"electron-builder:nsis\")\n\nexport class AppPackageHelper {\n  private readonly archToFileInfo = new Map<Arch, Promise<PackageFileInfo>>()\n  private readonly infoToIsDelete = new Map<PackageFileInfo, boolean>()\n\n  /** @private */\n  refCount = 0\n\n  async packArch(arch: Arch, target: NsisTarget) {\n    let infoPromise = this.archToFileInfo.get(arch)\n    if (infoPromise == null) {\n      infoPromise = subTask(`Packaging NSIS installer for arch ${Arch[arch]}`, target.buildAppPackage(target.archs.get(arch)!, arch))\n        .then(it => ({file: it}))\n      this.archToFileInfo.set(arch, infoPromise)\n    }\n\n    const info = await infoPromise\n    if (target.isWebInstaller) {\n      this.infoToIsDelete.set(info, false)\n    }\n    else if (!this.infoToIsDelete.has(info)) {\n      this.infoToIsDelete.set(info, true)\n    }\n    return info.file\n  }\n\n  async finishBuild(): Promise<any> {\n    if (--this.refCount > 0) {\n      return\n    }\n\n    const filesToDelete: Array<string> = []\n    for (const [info, isDelete]  of this.infoToIsDelete.entries()) {\n      if (isDelete) {\n        filesToDelete.push(info.file)\n      }\n    }\n\n    await BluebirdPromise.map(filesToDelete, it => unlink(it))\n  }\n}\n\nasync function writeCustomLangFile(data: string, packager: PlatformPackager<any>) {\n  const file = await packager.getTempFile(\"messages.nsh\")\n  await outputFile(file, data)\n  return file\n}\n\nexport async function addCustomMessageFileInclude(input: string, packager: PlatformPackager<any>, isMultiLang: boolean, scriptGenerator: NsisScriptGenerator) {\n  const data = safeLoad(await readFile(path.join(nsisTemplatesDir, input), \"utf-8\"))\n  if (!isMultiLang) {\n    for (const messageId of Object.keys(data)) {\n      for (const langId of Object.keys(data[messageId])) {\n        if (langId !== \"en\") {\n          delete data[messageId][langId]\n        }\n      }\n    }\n  }\n\n  const instructions = computeCustomMessageTranslations(data, isMultiLang).join(\"\\n\")\n  debug(instructions)\n  scriptGenerator.include(await writeCustomLangFile(instructions, packager))\n}\n\nfunction computeCustomMessageTranslations(messages: any, isUnicodeEnabled: boolean): Array<string> {\n  const result: Array<string> = []\n  for (const messageId of Object.keys(messages)) {\n    const langToTranslations = messages[messageId]\n    const unspecifiedLangs = new Set(bundledLanguages)\n    for (const lang of Object.keys(langToTranslations)) {\n      const langWithRegion = toLangWithRegion(lang)\n      result.push(`LangString ${messageId} ${lcid[langWithRegion]} \"${langToTranslations[lang].replace(/\\n/g, \"$\\\\r$\\\\n\")}\"`)\n      unspecifiedLangs.delete(langWithRegion)\n    }\n\n    if (isUnicodeEnabled) {\n      const defaultTranslation = langToTranslations.en.replace(/\\n/g, \"$\\\\r$\\\\n\")\n      for (const langWithRegion of unspecifiedLangs) {\n        result.push(`LangString ${messageId} ${lcid[langWithRegion]} \"${defaultTranslation}\"`)\n      }\n    }\n  }\n  return result\n}"]}
