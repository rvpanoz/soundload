{"version":3,"file":"nsisUtil.js","sourceRoot":"","sources":["../../../src/targets/nsis/nsisUtil.ts"],"names":[],"mappings":"AAAA,AAAO,AAAe,AAAM,AAAc;;;;;;;;;;;;;;;;;;;;;;;AAC1C,AAAO,AAAE,AAAI,AAAE,AAAO,AAAE,AAAM,AAAuB;;;;;;AACrD,AAAO,AAAE,AAAM,AAAE,AAAM,AAAY;;;;AACnC,AAAO,AAAK,AAAI,AAAM,AAAM,AAG5B,AAAM;;;;;;AAAC,MAAM,AAAgB,8CAAG,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,MAAE,AAAI,MAAE,AAAI,MAAE,AAAW,aAAE,AAAM,AAAC,AAM3F,AAAM;;AAAN;AACmB,aAAc,iBAAG,IAAI,AAAG,AAAkC;AAC1D,aAAc,iBAAG,IAAI,AAAG,AAA4B;AAErE,AAAe;AACf,aAAQ,WAAG,AAAC,AAkCd;AAAC;AAhCO,AAAQ,YAAd,AAAK,CAAU,AAAU,MAAE,AAAkB;;;;AAC3C,gBAAI,AAAW,cAAG,AAAI,MAAC,AAAc,eAAC,AAAG,IAAC,AAAI,AAAC;AAC/C,AAAE,AAAC,gBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAW,sIAAgD,AAAI,2DAAC,AAAI,AAAC,KAAE,IAAE,AAAM,OAAC,AAAe,gBAAC,AAAM,OAAC,AAAK,MAAC,AAAG,IAAC,AAAI,AAAE,OAAE,AAAI,AAAC,AAAC,OAC5H,AAAI;AAAC,AAAE,AAAI,2BAAC,EAAC,AAAI,MAAE,AAAE,AAAC,AAAC,AAAC;iBADb,AAAO,AAAC;AAEtB,AAAI,sBAAC,AAAc,eAAC,AAAG,IAAC,AAAI,MAAE,AAAW,AAAC,AAC5C;AAAC;AAED,kBAAM,AAAI,OAAG,MAAM,AAAW;AAC9B,AAAE,AAAC,gBAAC,AAAM,OAAC,AAAc,AAAC,gBAAC,AAAC;AAC1B,AAAI,sBAAC,AAAc,eAAC,AAAG,IAAC,AAAI,MAAE,AAAK,AAAC,AACtC;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,CAAC,AAAI,MAAC,AAAc,eAAC,AAAG,IAAC,AAAI,AAAC,AAAC,OAAC,AAAC;AACxC,AAAI,sBAAC,AAAc,eAAC,AAAG,IAAC,AAAI,MAAE,AAAI,AAAC,AACrC;AAAC;AACD,AAAM,mBAAC,AAAI,KAAC,AAAI,AAClB;;AAAC;AAEK,AAAW,eAAjB,AAAK;;;;AACH,AAAE,AAAC,gBAAC,EAAE,AAAI,OAAC,AAAQ,WAAG,AAAC,AAAC,GAAC,AAAC;AACxB,AAAM,AACR;AAAC;AAED,kBAAM,AAAa,gBAAkB,AAAE;AACvC,AAAG,AAAC,AAAC,AAAM,+BAAqB,AAAI,OAAC,AAAc,eAAC,AAAO,AAAE,AAAC;AAAC,AAAC;;sBAApD,AAAI;sBAAE,AAAQ,AAAC;;AACzB,AAAE,AAAC,oBAAC,AAAQ,AAAC,UAAC,AAAC;AACb,AAAa,kCAAC,AAAI,KAAC,AAAI,KAAC,AAAI,AAAC,AAC/B;AAAC,AACH;AAAC;AAED,kEAAsB,AAAG,IAAC,AAAa;AAAE,AAAE,uBAAI,AAAM,4CAAC,AAAE,AAAC,AAAC,AAC5D;aADQ,AAAe;;AACtB,AACF","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, subTask } from \"electron-builder-util\"\nimport { unlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { NsisTarget } from \"./nsis\"\n\nexport const nsisTemplatesDir = path.join(__dirname, \"..\", \"..\", \"..\", \"templates\", \"nsis\")\n\ninterface PackageFileInfo {\n  file: string\n}\n\nexport class AppPackageHelper {\n  private readonly archToFileInfo = new Map<Arch, Promise<PackageFileInfo>>()\n  private readonly infoToIsDelete = new Map<PackageFileInfo, boolean>()\n\n  /** @private */\n  refCount = 0\n\n  async packArch(arch: Arch, target: NsisTarget) {\n    let infoPromise = this.archToFileInfo.get(arch)\n    if (infoPromise == null) {\n      infoPromise = subTask(`Packaging NSIS installer for arch ${Arch[arch]}`, target.buildAppPackage(target.archs.get(arch)!, arch))\n        .then(it => ({file: it}))\n      this.archToFileInfo.set(arch, infoPromise)\n    }\n\n    const info = await infoPromise\n    if (target.isWebInstaller) {\n      this.infoToIsDelete.set(info, false)\n    }\n    else if (!this.infoToIsDelete.has(info)) {\n      this.infoToIsDelete.set(info, true)\n    }\n    return info.file\n  }\n\n  async finishBuild(): Promise<any> {\n    if (--this.refCount > 0) {\n      return\n    }\n\n    const filesToDelete: Array<string> = []\n    for (const [info, isDelete]  of this.infoToIsDelete.entries()) {\n      if (isDelete) {\n        filesToDelete.push(info.file)\n      }\n    }\n\n    await BluebirdPromise.map(filesToDelete, it => unlink(it))\n  }\n}"]}
