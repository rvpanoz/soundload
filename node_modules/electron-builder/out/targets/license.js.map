{"version":3,"file":"license.js","sourceRoot":"","sources":["../../src/targets/license.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEAIO,AAAK,WAA0B,AAA+B;AACnE,cAAM,AAAK,SAAI,MAAM,AAAQ,SAAC,AAAY,AAAC,cACxC,AAAM,OAAC,AAAE;AACR,kBAAM,AAAI,OAAG,AAAE,GAAC,AAAW,AAAE;AAC7B,AAAM,mBAAC,CAAC,AAAI,KAAC,AAAU,WAAC,AAAU,AAAC,eAAI,AAAI,KAAC,AAAU,WAAC,AAAO,AAAC,AAAC,AAAI,cAAC,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,WAAI,AAAI,KAAC,AAAQ,SAAC,AAAM,AAAC,AAAC,AACtH;AAAC,AAAC,SAJU,EAKX,AAAI,KAAC,UAAC,AAAC,GAAE,AAAC;AACT,kBAAM,AAAE,KAAG,AAAC,EAAC,AAAQ,QAAC,AAAK,AAAC,gBAAG,AAAC,IAAG,AAAG;AACtC,kBAAM,AAAE,KAAG,AAAC,EAAC,AAAQ,QAAC,AAAK,AAAC,gBAAG,AAAC,IAAG,AAAG;AACtC,AAAM,mBAAC,AAAE,OAAK,AAAE,KAAG,AAAC,EAAC,AAAa,cAAC,AAAC,AAAC,KAAG,AAAE,KAAG,AAAE,AACjD;AAAC,AAAC;AAEJ,AAAM,qBAAO,AAAG,IAAC,AAAI;AACnB,gBAAI,AAAI,OAAG,AAAI,KAAC,AAAK,MAAC,AAAY,AAAE,cAAC,AAAC,AAAC;AACvC,gBAAI,AAAc;AAClB,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAQ,QAAC,AAAG,AAAC,AAAC,aAAC,AAAC;AACvB,AAAc,iCAAG,AAAI;AACrB,AAAI,uBAAG,AAAc,eAAC,AAAS,UAAC,AAAC,GAAE,AAAI,KAAC,AAAO,QAAC,AAAG,AAAC,AAAC,AACvD;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAI,uBAAG,AAAI,KAAC,AAAW,AAAE;AACzB,AAAc,iCAAG,AAAgB,gDAAC,AAAI,AAAC,AACzC;AAAC;AACD,AAAM,mBAAC,EAAC,AAAI,MAAE,AAAI,MAAC,AAAI,KAAC,AAAQ,SAAC,AAAiB,mBAAE,AAAI,AAAC,OAAE,AAAI,MAAE,AAAc,gBAAE,AAAQ,UAAG,AAAoB,uCAAC,AAAI,AAAC,AAAC,AACzH;AAAC,AAAC,AACJ,SAbS,AAAK;AAab;;;;;;;;;AA7BD,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAE5B,AAAO,AAAE,AAAY,AAAE,AAAgB,AAAE,AAAM,AAAe,AAE9D,AAAM","sourcesContent":["import * as path from \"path\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { langIdToName, toLangWithRegion } from \"../util/langs\"\n\nexport async function getLicenseFiles(packager: PlatformPackager<any>): Promise<Array<LicenseFile>> {\n  const files = (await packager.resourceList)\n    .filter(it => {\n      const name = it.toLowerCase()\n      return (name.startsWith(\"license_\") || name.startsWith(\"eula_\")) && (name.endsWith(\".rtf\") || name.endsWith(\".txt\"))\n    })\n    .sort((a, b) => {\n      const aW = a.includes(\"_en\") ? 0 : 100\n      const bW = b.includes(\"_en\") ? 0 : 100\n      return aW === bW ? a.localeCompare(b) : aW - bW\n    })\n\n  return files.map(file => {\n    let lang = file.match(/_([^.]+)\\./)![1]\n    let langWithRegion\n    if (lang.includes(\"_\")) {\n      langWithRegion = lang\n      lang = langWithRegion.substring(0, lang.indexOf(\"_\"))\n    }\n    else {\n      lang = lang.toLowerCase()\n      langWithRegion = toLangWithRegion(lang)\n    }\n    return {file: path.join(packager.buildResourcesDir, file), lang, langWithRegion, langName: (langIdToName as any)[lang]}\n  })\n}\n\n/** @internal */\nexport interface LicenseFile {\n  file: string\n  lang: string\n  langWithRegion: string\n  langName: string\n}"]}
