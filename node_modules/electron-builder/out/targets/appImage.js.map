{"version":3,"file":"appImage.js","sourceRoot":"","sources":["../../src/targets/appImage.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, exec, log } from \"electron-builder-util\"\nimport { getBin, getBinFromGithub } from \"electron-builder-util/out/binDownload\"\nimport { unlinkIfExists } from \"electron-builder-util/out/fs\"\nimport { chmod, close, createReadStream, createWriteStream, open, write } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { v1 as uuid1 } from \"uuid-1345\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { LinuxBuildOptions } from \"../options/linuxOptions\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\n\nconst appImageVersion = process.platform === \"darwin\" ? \"AppImage-17-06-17-mac\" : \"AppImage-09-07-16-linux\"\n//noinspection SpellCheckingInspection\nconst appImagePathPromise = process.platform === \"darwin\" ? getBinFromGithub(\"AppImage\", \"17-06-17-mac\", \"vIaikS8Z2dEnZXKSgtcTn4gimPHCclp+v62KV2Eh9EhxvOvpDFgR3FCgdOsON4EqP8PvnfifNtxgBixCfuQU0A==\") : getBin(\"AppImage\", appImageVersion, `https://dl.bintray.com/electron-userland/bin/${appImageVersion}.7z`, \"ac324e90b502f4e995f6a169451dbfc911bb55c0077e897d746838e720ae0221\")\n\nexport default class AppImageTarget extends Target {\n  readonly options: LinuxBuildOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n  private readonly desktopEntry: Promise<string>\n\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = BluebirdPromise.promisify(uuid1)({mac: false})\n      .then(uuid => helper.computeDesktopEntry(this.options, \"AppRun\", null, {\n        \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n        \"X-AppImage-BuildId\": uuid,\n      }))\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    log(`Building AppImage for arch ${Arch[arch]}`)\n\n    const packager = this.packager\n\n    // https://github.com/electron-userland/electron-builder/issues/775\n    // https://github.com/electron-userland/electron-builder/issues/1726\n    const resultFile = path.join(this.outDir, this.options.artifactName == null ? packager.computeSafeArtifactName(\"AppImage\", arch, false) : packager.expandArtifactNamePattern(this.options, \"AppImage\", arch))\n    await unlinkIfExists(resultFile)\n\n    const appImagePath = await appImagePathPromise\n    const desktopFile = await this.desktopEntry\n    const args = [\n      \"-joliet\", \"on\",\n      \"-volid\", \"AppImage\",\n      \"-dev\", resultFile,\n      \"-padding\", \"0\",\n      \"-map\", appOutDir, \"/usr/bin\",\n      \"-map\", path.join(__dirname, \"..\", \"..\", \"templates\", \"linux\", \"AppRun.sh\"), \"/AppRun\",\n      // we get executable name in the AppRun by desktop file name, so, must be named as executable\n      \"-map\", desktopFile, `/${this.packager.executableName}.desktop`,\n    ]\n    for (const [from, to] of (await this.helper.icons)) {\n      args.push(\"-map\", from, `/usr/share/icons/default/${to}`)\n    }\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n    args.push(\"-map\", this.helper.maxIconPath, \"/.DirIcon\")\n\n    if (arch === Arch.x64) {\n      // noinspection SpellCheckingInspection\n      const libDir = process.platform === \"darwin\" ? path.join(appImagePath, \"packages\") : await getBin(\"AppImage-packages\", \"10.03.17\", \"https://bintray.com/electron-userland/bin/download_file?file_path=AppImage-packages-10.03.17-x64.7z\", \"172f9977fe9b24d35091d26ecbfebe2a14d96516a9c903e109e12b2a929042fe\")\n      args.push(\"-map\", libDir, \"/usr/lib\")\n    }\n\n    args.push(\"-chown_r\", \"0\", \"/\", \"--\")\n    args.push(\"-zisofs\", `level=${process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL || (packager.config.compression === \"store\" ? \"0\" : \"9\")}:block_size=128k:by_magic=off`)\n    args.push(\"set_filter_r\", \"--zisofs\", \"/\")\n\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed([args, desktopFile])) {\n      return\n    }\n\n    await exec(process.arch !== \"x64\" || (process.env.USE_SYSTEM_XORRISO === \"true\" || process.env.USE_SYSTEM_XORRISO === \"\") ? \"xorriso\" : path.join(appImagePath, \"xorriso\"), args, {\n      maxBuffer: 2 * 1024 * 1024\n    })\n\n    await new BluebirdPromise((resolve, reject) => {\n      const rd = createReadStream(path.join(appImagePath, arch === Arch.ia32 ? \"32\" : \"64\", \"runtime\"))\n      rd.on(\"error\", reject)\n      const wr = createWriteStream(resultFile, {flags: \"r+\"})\n      wr.on(\"error\", reject)\n      wr.on(\"close\", resolve)\n      rd.pipe(wr)\n    })\n\n    const fd = await open(resultFile, \"r+\")\n    try {\n      const magicData = new Buffer([0x41, 0x49, 0x01])\n      await write(fd, magicData, 0, magicData.length, 8)\n    }\n    finally {\n      await close(fd)\n    }\n\n    await chmod(resultFile, \"0755\")\n\n    packager.dispatchArtifactCreated(resultFile, this, arch, packager.computeSafeArtifactName(\"AppImage\", arch, false))\n  }\n}"]}
