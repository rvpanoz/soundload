"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.addLicenseToDmg = undefined;

var _bluebirdLst;

function _load_bluebirdLst() {
    return _bluebirdLst = require("bluebird-lst");
}

/** @internal */
let addLicenseToDmg = exports.addLicenseToDmg = (() => {
    var _ref = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (packager, dmgPath) {
        // http://www.owsiak.org/?p=700
        const licenseFiles = yield (0, (_license || _load_license()).getLicenseFiles)(packager);
        if (licenseFiles.length === 0) {
            return;
        }
        if ((_electronBuilderUtil || _load_electronBuilderUtil()).debug.enabled) {
            (0, (_electronBuilderUtil || _load_electronBuilderUtil()).debug)(`License files: ${licenseFiles.join(" ")}`);
        }
        let data = yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(_path.join(__dirname, "..", "..", "templates", "dmg", "license.txt"), "utf8");
        let counter = 5000;
        for (const item of licenseFiles) {
            const kind = item.file.toLowerCase().endsWith(".rtf") ? "RTF" : "TEXT";
            data += `data '${kind}' (${counter}, "${item.langName} SLA") {\n`;
            const hex = (yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(item.file)).toString("hex").toUpperCase();
            for (let i = 0; i < hex.length; i += 32) {
                data += '$"' + hex.substring(i, Math.min(i + 32, hex.length)) + '"\n';
            }
            data += "};\n\n";
            // noinspection SpellCheckingInspection
            data += `data 'styl' (${counter}, "${item.langName} SLA") {
  $"0003 0000 0000 000C 0009 0014 0000 0000"
  $"0000 0000 0000 0000 0027 000C 0009 0014"
  $"0100 0000 0000 0000 0000 0000 002A 000C"
  $"0009 0014 0000 0000 0000 0000 0000"
};`;
            counter++;
        }
        const tempFile = yield packager.getTempFile(".r");
        yield (0, (_fsExtraP || _load_fsExtraP()).writeFile)(tempFile, data);
        yield (0, (_electronBuilderUtil || _load_electronBuilderUtil()).exec)("hdiutil", ["unflatten", dmgPath]);
        yield (0, (_electronBuilderUtil || _load_electronBuilderUtil()).exec)("Rez", ["-a", tempFile, "-o", dmgPath]);
        yield (0, (_electronBuilderUtil || _load_electronBuilderUtil()).exec)("hdiutil", ["flatten", dmgPath]);
    });

    return function addLicenseToDmg(_x, _x2) {
        return _ref.apply(this, arguments);
    };
})();
//# sourceMappingURL=dmgLicense.js.map


var _electronBuilderUtil;

function _load_electronBuilderUtil() {
    return _electronBuilderUtil = require("electron-builder-util");
}

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _path = _interopRequireWildcard(require("path"));

var _license;

function _load_license() {
    return _license = require("./license");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }