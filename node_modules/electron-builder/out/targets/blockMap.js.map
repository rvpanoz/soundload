{"version":3,"file":"blockMap.js","sourceRoot":"","sources":["../../src/targets/blockMap.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;oEAKA,AAAK,WAAwB,AAAiB,WAAE,AAAW;AACzD,cAAM,AAAE,KAAG,MAAM,AAAI,0CAAC,AAAS,WAAE,AAAG,AAAC;AAErC,cAAM,AAAS,YAAG,AAAE,KAAG,AAAI;AAC3B,cAAM,AAAM,SAAG,AAAM,OAAC,AAAW,YAAC,AAAS,AAAC;AAC5C,cAAM,AAAI,OAAG,AAAI,KAAC,AAAI;AACtB,cAAM,AAAM,SAAG,AAAE;AAEjB,AAAG,AAAC,aAAC,IAAI,AAAM,SAAG,AAAC,GAAE,AAAM,SAAG,AAAI,MAAE,AAAM,UAAI,AAAS,WAAE,AAAC;AACxD,kBAAM,AAAe,kBAAG,AAAI,KAAC,AAAG,IAAC,AAAI,OAAG,AAAM,QAAE,AAAS,AAAC;AAC1D,kBAAM,AAAI,0CAAC,AAAE,IAAE,AAAM,QAAE,AAAC,GAAE,AAAe,iBAAE,AAAM,AAAC;AAElD,kBAAM,AAAI,OAAG,AAAU,4CAAC,AAAQ,AAAC;AACjC,AAAI,iBAAC,AAAM,OAAC,AAAe,oBAAK,AAAS,YAAG,AAAM,SAAG,AAAM,OAAC,AAAK,MAAC,AAAC,GAAE,AAAe,AAAC,AAAC;AACtF,AAAM,mBAAC,AAAI,KAAC,AAAI,KAAC,AAAM,OAAC,AAAQ,AAAC,AAAC,AACpC;AAAC;AAED,AAAM,eAAC,AAAM,AACf;AAAC,AAED,AAAM;;;;;;;;qEAAC,AAAK,WAA0B,AAAiB;AACrD,cAAM,AAAK,QAAG,IAAI,AAAG,AAAiB;AACtC,4CAAW,AAAS,WAAE,AAAI;AACxB,AAAO,qBAAE,UAAC,AAAI,MAAE,AAAQ;AACtB,AAAE,AAAC,oBAAC,AAAQ,SAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AACtB,AAAK,0BAAC,AAAG,IAAC,AAAI,MAAE,AAAQ,AAAC,AAC3B;AAAC,AACH;AAAC,AACF,AAAC;AAN0B,SAAtB,AAAI;AAQV,cAAM,AAAI,OAAe,AAAE;AAC3B,AAAG,AAAC,AAAC,AAAM,4BAAgB,AAAK,MAAC,AAAO,AAAE,AAAC;AAAC,AAAC;;kBAAjC,AAAI;kBAAE,AAAI,AAAC;;AACrB,kBAAM,AAAM,SAAG,MAAM,AAAa,cAAC,AAAI,MAAE,AAAI,AAAC;AAC9C,AAAI,iBAAC,AAAI,KAAC,EAAC,AAAI,MAAE,AAAI,KAAC,AAAS,UAAC,AAAS,UAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAO,QAAC,AAAK,OAAE,AAAG,AAAC,MAAE,AAAM,AAAC,AAAC,AACrF;AAAC;AACD,AAAM,eAAC,AAAQ,0CAAC,AAAI,AAAC,AACvB;AAAC;;;;;;;;;;;AAzCD,AAAO,AAAE,AAAU,AAAE,AAAM,AAAQ;;;;;;AACnC,AAAO,AAAE,AAAI,AAAE,AAAM,AAA8B;;;;;;AACnD,AAAO,AAAE,AAAI,AAAE,AAAI,AAAS,AAAM,AAAY;;;;;;AAC9C,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS","sourcesContent":["import { createHash } from \"crypto\"\nimport { walk } from \"electron-builder-util/out/fs\"\nimport { open, read, Stats } from \"fs-extra-p\"\nimport { safeDump } from \"js-yaml\"\n\nasync function computeBlocks(inputFile: string, stat: Stats): Promise<Array<string>> {\n  const fd = await open(inputFile, \"r\")\n\n  const chunkSize = 64 * 1024\n  const buffer = Buffer.allocUnsafe(chunkSize)\n  const size = stat.size\n  const blocks = []\n\n  for (let offset = 0; offset < size; offset += chunkSize) {\n    const actualChunkSize = Math.min(size - offset, chunkSize)\n    await read(fd, buffer, 0, actualChunkSize, offset)\n\n    const hash = createHash(\"sha256\")\n    hash.update(actualChunkSize === chunkSize ? buffer : buffer.slice(0, actualChunkSize))\n    blocks.push(hash.digest(\"base64\"))\n  }\n\n  return blocks\n}\n\nexport async function computeBlockMap(appOutDir: string): Promise<string> {\n  const files = new Map<string, Stats>()\n  await walk(appOutDir, null, {\n    consume: (file, fileStat) => {\n      if (fileStat.isFile()) {\n        files.set(file, fileStat)\n      }\n    }\n  })\n\n  const info: Array<any> = []\n  for (const [file, stat] of files.entries()) {\n    const blocks = await computeBlocks(file, stat)\n    info.push({name: file.substring(appOutDir.length + 1).replace(/\\\\/g, \"/\"), blocks})\n  }\n  return safeDump(info)\n}"]}
