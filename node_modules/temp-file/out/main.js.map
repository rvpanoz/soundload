{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { mkdirs, mkdtemp, remove, removeSync, unlink, unlinkSync, mkdir, realpath } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport { tmpdir } from \"os\"\nimport * as path from \"path\"\n\nlet tmpFileCounter = 0\nconst tmpDirManagers = new Set<TmpDir>()\n\n// add date to avoid use stale temp dir\nconst tempDirPrefix = `${process.pid.toString(16)}-${Date.now().toString(16)}`\n\nexport function getTempName(prefix?: string | null | undefined): string {\n  return `${prefix == null ? \"\" : `${prefix}-`}${tempDirPrefix}-${(tmpFileCounter++).toString(16)}`\n}\n\nconst tempDir = new Lazy<string>(() => {\n  let promise: Promise<string>\n  const systemTmpDir = process.env.TEST_DIR || tmpdir()\n  if (mkdtemp == null) {\n    const dir = path.join(systemTmpDir, getTempName(\"electron-builder\"))\n    promise = mkdirs(dir, {mode: 448}).then(() => dir)\n  }\n  else {\n    promise = mkdtemp(`${path.join(systemTmpDir, \"electron-builder\")}-`)\n  }\n\n  return promise\n    .then(it => realpath(it))\n    .then(dir => {\n      require(\"async-exit-hook\")((callback: (() => void) | null) => {\n        const managers = Array.from(tmpDirManagers)\n        tmpDirManagers.clear()\n\n        if (callback == null) {\n          for (const manger of managers) {\n            manger.cleanupSync()\n          }\n\n          try {\n            removeSync(dir)\n          }\n          catch (e) {\n            handleError(e, dir)\n          }\n          return\n        }\n\n        // each instead of map to avoid fs overload\n        BluebirdPromise.each(managers, it => it.cleanup())\n          .then(() => remove(dir))\n          .then(() => callback())\n          .catch(e => {\n            try {\n              handleError(e, dir)\n            }\n            finally {\n              callback()\n            }\n          })\n      })\n      return dir\n    })\n})\n\nfunction handleError(e: any, file: string) {\n  if (e.code !== \"EPERM\" && e.code !== \"ENOENT\") {\n    // use only console.* instead of our warn on exit (otherwise nodeEmoji can be required on request)\n    console.warn(`Cannot delete temporary \"${file}\": ${(e.stack || e).toString()}`)\n  }\n}\n\ninterface TempFileInfo {\n  isDir: boolean\n  path: string\n  disposer: ((file: string) => Promise<void>) | null\n}\n\nexport class TmpDir {\n  private tempFiles: Array<TempFileInfo> = []\n  private registered = false\n\n  getTempDir(suffix: string = \"\"): Promise<string> {\n    return this.getTempFile(suffix, true)\n  }\n\n  createTempDir(suffix: string = \"\"): Promise<string> {\n    return this.getTempFile(suffix, true)\n      .then(it => mkdir(it).then(() => it))\n  }\n\n  getTempFile(suffix: string, isDir: boolean = false, disposer: ((file: string) => Promise<void>) | null = null): Promise<string> {\n    return tempDir.value\n      .then(it => {\n        if (!this.registered) {\n          this.registered = true\n          tmpDirManagers.add(this)\n        }\n\n        const result = `${it}${path.sep}${(tmpFileCounter++).toString(16)}${suffix.length === 0 || suffix.startsWith(\".\") ? suffix : `-${suffix}`}`\n        this.tempFiles.push({path: result, isDir, disposer})\n        return result\n      })\n  }\n\n  cleanupSync() {\n    const tempFiles = this.tempFiles\n    tmpDirManagers.delete(this)\n    this.registered = false\n    if (tempFiles.length === 0) {\n      return\n    }\n\n    this.tempFiles = []\n\n    for (const file of tempFiles) {\n      if (file.disposer != null) {\n        // noinspection JSIgnoredPromiseFromCall\n        file.disposer(file.path)\n        continue\n      }\n\n      try {\n        if (file.isDir) {\n          removeSync(file.path)\n        }\n        else {\n          unlinkSync(file.path)\n        }\n      }\n      catch (e) {\n        handleError(e, file.path)\n      }\n    }\n  }\n\n  cleanup(): Promise<any> {\n    const tempFiles = this.tempFiles\n    tmpDirManagers.delete(this)\n    this.registered = false\n    if (tempFiles.length === 0) {\n      return BluebirdPromise.resolve()\n    }\n\n    this.tempFiles = []\n\n    return BluebirdPromise.map(tempFiles, it => {\n      if (it.disposer != null) {\n        return it.disposer(it.path)\n      }\n\n      return (it.isDir ? remove(it.path) : unlink(it.path))\n        .catch(e => {\n          handleError(e, it.path)\n        })\n    }, {concurrency: 8})\n  }\n}\n"]}
