/// <reference types="node" />
import { ChildProcess, SpawnOptions } from "child_process";
import "source-map-support/register";
export { TmpDir } from "temp-file";
export { log, warn, task, subTask } from "./log";
export { isMacOsSierra } from "./macosVersion";
export { execWine, prepareWindowsExecutableArgs } from "./wine";
export { Arch, toLinuxArchString, getArchSuffix, ArchType, archFromString } from "./arch";
export declare const debug: debug.Debugger;
export declare const debug7z: debug.Debugger;
export interface BaseExecOptions {
    cwd?: string;
    env?: any;
    stdio?: any;
}
export interface ExecOptions extends BaseExecOptions {
    customFds?: any;
    encoding?: string;
    timeout?: number;
    maxBuffer?: number;
    killSignal?: string;
}
export declare function removePassword(input: string): string;
export declare function exec(file: string, args?: Array<string> | null, options?: ExecOptions, isLogOutIfDebug?: boolean): Promise<string>;
export interface ExtraSpawnOptions {
    isDebugEnabled?: boolean;
    isPipeInput?: boolean;
}
export declare function doSpawn(command: string, args: Array<string>, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): ChildProcess;
export declare function spawn(command: string, args?: Array<string> | null, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): Promise<any>;
export declare function handleProcess(event: string, childProcess: ChildProcess, command: string, resolve: ((value?: any) => void) | null, reject: (reason?: any) => void): void;
export declare function use<T, R>(value: T | null, task: (it: T) => R): R | null;
export declare function debug7zArgs(command: "a" | "x"): Array<string>;
export declare function isEmptyOrSpaces(s: string | null | undefined): s is "" | null | undefined;
export declare function isTokenCharValid(token: string): boolean;
export declare function asArray<T>(v: null | undefined | T | Array<T>): Array<T>;
export declare function getCacheDirectory(): string;
export declare function smarten(s: string): string;
export declare function addValue<K, T>(map: Map<K, Array<T>>, key: K, value: T): void;
export declare function replaceDefault(inList: Array<string> | null | undefined, defaultList: Array<string>): Array<string>;
export declare function getPlatformIconFileName(value: string | null | undefined, isMac: boolean): string | null | undefined;
export declare function isPullRequest(): boolean | "" | undefined;
export declare function safeStringifyJson(data: any, skippedNames?: Set<string>): string;
export declare function isEnvTrue(value: string | null | undefined): boolean;
